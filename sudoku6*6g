<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>6√ó6 Sudoku (2√ó3 Boxes)</title>
  <style>
    :root { --cell: 48px; }
    body {
      font-family: Arial, sans-serif;
      display: grid;
      place-items: center;
      gap: 12px;
      padding: 20px;
      background: #fdfdfd;
    }
    .toolbar { display: flex; gap: 8px; flex-wrap: wrap; align-items:center; }
    input[type="text"].name { padding:6px; border-radius:6px; border:1px solid #ccc; }
    button {
      padding: 8px 12px;
      border: 1px solid #ccc;
      background: #f7f7f7;
      border-radius: 8px;
      cursor: pointer;
    }
    button:hover { background: #eee; }

    .sudoku {
      display: grid;
      grid-template-columns: repeat(6, var(--cell));
      grid-template-rows: repeat(6, var(--cell));
      border: 3px solid #000;
    }
    .cell input {
      width: 100%;
      height: 100%;
      text-align: center;
      font-size: 1.2rem;
      border: 1px solid #bbb;
    }
    .cell input:focus { outline: 2px solid #0077ff; }
    .given {
      background: #f0f0f0;
      font-weight: bold;
    }

    #message { font-weight: bold; }
    .correct { color: green; }
    .wrong { color: red; }

    #leaderboard {
      margin-top: 16px;
      border: 2px solid #000;
      padding: 10px;
      width: 260px;
      background: #fafafa;
    }
    #leaderboard h3 { text-align: center; margin: 0 0 8px; }
    #leaderboard ol { margin: 0; padding-left: 20px; }

    #timer { font-weight: bold; color: blue; }
  </style>
</head>
<body>
  <h2>6√ó6 Sudoku (Boxes: 2√ó3)</h2>

  <div class="toolbar">
    <input type="text" id="playerName" class="name" placeholder="Enter your name" />
    <button id="loadSample">Load Puzzle</button>
    <button id="clear">Clear</button>
    <button id="check">Check Solution</button>
    <div id="timer">‚è± Time: 0:00</div>
  </div>

  <div class="sudoku" id="sudoku"></div>
  <div id="message"></div>

  <div id="leaderboard">
    <h3>üèÜ Leaderboard (Top 5)</h3>
    <ol id="scores"></ol>
  </div>

<script>
  // --- Sample Puzzle (0 = empty) ---
  const puzzle = [
    [1,2,0, 4,0,6],
    [0,5,6, 0,2,0],
    [2,0,1, 0,6,4],
    [0,6,0, 2,0,1],
    [3,0,2, 6,0,5],
    [0,1,0, 3,4,0]
  ];
  const solution = [
    [1,2,3, 4,5,6],
    [4,5,6, 1,2,3],
    [2,3,1, 5,6,4],
    [5,6,4, 2,3,1],
    [3,4,2, 6,1,5],
    [6,1,5, 3,4,2]
  ];

  const sudokuContainer = document.getElementById("sudoku");
  const messageEl = document.getElementById("message");
  const timerEl = document.getElementById("timer");
  const scoresEl = document.getElementById("scores");
  let startTime, timerInterval;

  function buildGrid(puzzle) {
    sudokuContainer.innerHTML = "";
    for (let r=0; r<6; r++) {
      for (let c=0; c<6; c++) {
        let cell = document.createElement("div");
        cell.className = "cell";
        let input = document.createElement("input");
        input.maxLength = 1;

        // borders for 2√ó3 boxes
        let style = "";
        if (c % 3 === 0) style += "border-left:3px solid black;";
        if (c === 5) style += "border-right:3px solid black;";
        if (r % 2 === 0) style += "border-top:3px solid black;";
        if (r === 5) style += "border-bottom:3px solid black;";
        input.style = style;

        let val = puzzle[r][c];
        if (val !== 0) {
          input.value = val;
          input.disabled = true;
          input.classList.add("given");
        }
        input.oninput = () => {
          if (!/^[1-6]$/.test(input.value)) input.value = "";
        };
        cell.appendChild(input);
        sudokuContainer.appendChild(cell);
      }
    }
  }

  function startTimer() {
    clearInterval(timerInterval);
    startTime = Date.now();
    timerInterval = setInterval(() => {
      let elapsed = Math.floor((Date.now()-startTime)/1000);
      let m = Math.floor(elapsed/60);
      let s = elapsed%60;
      timerEl.textContent = `‚è± Time: ${m}:${s.toString().padStart(2,'0')}`;
    }, 1000);
  }

  function stopTimer() {
    clearInterval(timerInterval);
    return Math.floor((Date.now()-startTime)/1000);
  }

  function checkSolution() {
    let inputs = sudokuContainer.querySelectorAll("input");
    let correct = true;
    for (let r=0; r<6; r++) {
      for (let c=0; c<6; c++) {
        let idx = r*6+c;
        let val = parseInt(inputs[idx].value || "0");
        if (val !== solution[r][c]) correct = false;
      }
    }
    if (correct) {
      let timeTaken = stopTimer();
      messageEl.textContent = "‚úÖ Correct Solution!";
      messageEl.className = "correct";
      saveScore(timeTaken);
    } else {
      messageEl.textContent = "‚ùå Wrong Solution!";
      messageEl.className = "wrong";
    }
  }

  function clearGrid() {
    let inputs = sudokuContainer.querySelectorAll("input");
    inputs.forEach(inp => { if (!inp.disabled) inp.value=""; });
    messageEl.textContent = "";
    clearInterval(timerInterval);
    timerEl.textContent = "‚è± Time: 0:00";
  }

  function saveScore(time) {
    let name = document.getElementById("playerName").value || "Player";
    let scores = JSON.parse(localStorage.getItem("sudoku6x6Scores")||"[]");
    scores.push({name, time});
    scores.sort((a,b)=>a.time-b.time);
    scores = scores.slice(0,5);
    localStorage.setItem("sudoku6x6Scores", JSON.stringify(scores));
    showScores();
  }

  function showScores() {
    let scores = JSON.parse(localStorage.getItem("sudoku6x6Scores")||"[]");
    scoresEl.innerHTML = "";
    scores.forEach(s=>{
      let li=document.createElement("li");
      li.textContent=`${s.name} - ${Math.floor(s.time/60)}:${(s.time%60).toString().padStart(2,"0")}`;
      scoresEl.appendChild(li);
    });
  }

  document.getElementById("loadSample").onclick = ()=>{ buildGrid(puzzle); startTimer(); messageEl.textContent=""; };
  document.getElementById("check").onclick = checkSolution;
  document.getElementById("clear").onclick = clearGrid;
  showScores();
</script>
</body>
</html>
